{
    "noir_version": "1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d",
    "hash": "385773622607409920",
    "abi": {
        "parameters": [
            {
                "name": "partial_data",
                "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                        {
                            "name": "storage",
                            "type": {
                                "kind": "array",
                                "length": 640,
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                }
                            }
                        },
                        {
                            "name": "len",
                            "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        }
                    ]
                },
                "visibility": "private"
            },
            {
                "name": "partial_hash",
                "type": {
                    "kind": "array",
                    "length": 8,
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                    }
                },
                "visibility": "private"
            },
            {
                "name": "full_data_length",
                "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                },
                "visibility": "private"
            },
            {
                "name": "base64_decode_offset",
                "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                },
                "visibility": "private"
            },
            {
                "name": "jwt_pubkey_modulus_limbs",
                "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 128
                    }
                },
                "visibility": "private"
            },
            {
                "name": "jwt_pubkey_redc_params_limbs",
                "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 128
                    }
                },
                "visibility": "private"
            },
            {
                "name": "jwt_signature_limbs",
                "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 128
                    }
                },
                "visibility": "private"
            },
            {
                "name": "domain",
                "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                        {
                            "name": "storage",
                            "type": {
                                "kind": "array",
                                "length": 64,
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                }
                            }
                        },
                        {
                            "name": "len",
                            "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        }
                    ]
                },
                "visibility": "public"
            }
        ],
        "return_type": {
            "abi_type": {
                "kind": "field"
            },
            "visibility": "public"
        },
        "error_types": {
            "2920182694213909827": {
                "error_kind": "string",
                "string": "attempt to subtract with overflow"
            },
            "5019202896831570965": {
                "error_kind": "string",
                "string": "attempt to add with overflow"
            },
            "5634341720269277520": {
                "error_kind": "fmtstring",
                "length": 58,
                "item_types": [
                    {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                    },
                    {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                    }
                ]
            },
            "5675127253506927136": {
                "error_kind": "string",
                "string": "utils::search could not find needle in haystack"
            },
            "5727012404371710682": {
                "error_kind": "string",
                "string": "push out of bounds"
            },
            "6314603625877298116": {
                "error_kind": "string",
                "string": "haystack length of size 0 not supported"
            },
            "6485997221020871071": {
                "error_kind": "string",
                "string": "call to assert_max_bit_size"
            },
            "6543056410826478903": {
                "error_kind": "string",
                "string": "incorrect value for claim"
            },
            "7233212735005103307": {
                "error_kind": "string",
                "string": "attempt to multiply with overflow"
            },
            "7788270038095378938": {
                "error_kind": "string",
                "string": "substring not present in main text (match found if a padding text included. is main text correctly formatted?)"
            },
            "9281715815618326061": {
                "error_kind": "string",
                "string": "invalid domain"
            },
            "10713088778935619315": {
                "error_kind": "string",
                "string": "char before domain is not '@'"
            },
            "13815800804469369678": {
                "error_kind": "string",
                "string": "partial_data length is too long"
            },
            "14225679739041873922": {
                "error_kind": "string",
                "string": "Index out of bounds"
            },
            "15412340888643424233": {
                "error_kind": "string",
                "string": "needle length of size 0 not supported"
            },
            "17843811134343075018": {
                "error_kind": "string",
                "string": "Stack too deep"
            }
        }
    },
    "bytecode": "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taO1Nzv7ga2vo6WjvbO7sz3dmWlp7sv0t3Zm+/9fvLDv9lqKdnpIR3Of0V7bvXahTK7jXrvVaK/rXruwD/l67rXbjfb67rULZXAD99qdRntD99pdRnsj99rdRntj99o9RnsT99q9RntT59pFX7uZe+2Cr9rcvXbWaG/hXrvQPmzpXrvgB7dyr13wg1u71y74wW3caxf84LbutQt+cDv32gU/uL177YIf3MG9dsEPdrnXLvjBbvfaBT/Y41670Pfpda/db7T7nGsX++L97rUL/ntH99oF/72Te+2C/97ZvXbBf+/iXrvgv3d1r13w37u51y74793daxf89x7utQv+e0/n2s2FOr+Xe7sLbcPe7rULbcM+7rULbcO+7rULbcN+7rULbcP+7rUL5eQA59rZQttwoHvtQttwkHvtQttwsHvtQttwiHvtQttwqHvtQttwmHvtQttwuHvtQttwhHvtQttwpHvtQtuQc69d8N9Hudcu+O+j3WsX/Pcx7rUL/vtY99oF/32ce+2C/z7euXZzwX+f4F674L9PdK9d8N8nudduNu+pTgZtfE8eHqfkiuedjes3pyPN98Xw64Stcbwnx/DQHkwf+Z781NxAW5uUa2uC3fJaUjlnwvFaXstreS2v5bW8ltfyWl7La3ktr1W8ttY8apdLrbUdaq3jUGtdh1rrOdRa36HWBg61NnSotZFDrY0dam3iUMv7Qq8lr23qUGszh1qbO9TawqHWlg61tnKotbVDrW0cam3rUGs7h1rbO9TawaFWl0OtbodaPQ61eh1q9TnU6neotaNDrZ0cau3sUGsXh1q7OtTazaHW7g619nCo5fs5g9Pacx61ay+HWns71NrHoda+DrX2c6i1v0OtAxxqHehQ6yCHWgc71DrEodahDrUOc6h1uEOtIxxqHelQK+dQ6yiHWkc71DrGodaxDrWOc6h1vEOtExxqnehQ6ySHWr7/5bW8ltfyWl7La3ktr+W1vJbX8lpey2t5La/ltbyW1/JaXstreS2v5bW8ltfyWl7La3ktr+W1vJbX8lpey2sNTsvlN4s+7b2W1/JaXstreS2v5bW8ltfyWl7La3ktr+W1vJbX8lpey2t5La/ltbyW1/JaXstreS2v5bW8ltfyWl7La3ktr+W1vJbX8lpey2t5La/ltbyW1/JaXstreS2v5bW8ltfyWl7La3ktr+W1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",
    "debug_symbols": "",
    "file_map": {
        "5": {
            "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
            "path": "std/cmp.nr"
        },
        "6": {
            "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
            "path": "std/collections/bounded_vec.nr"
        },
        "17": {
            "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
            "path": "std/field/bn254.nr"
        },
        "18": {
            "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
            "path": "std/field/mod.nr"
        },
        "20": {
            "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
            "path": "std/hash/poseidon2.nr"
        },
        "50": {
            "source": "mod zk_jwt;\nmod tests;\n\nuse zk_jwt::{\n    utils::{decimal_string_to_field, get_domain_start_index_in_email},\n    nullifier_generator::{\n        generate_nullifier_with_poseidon2,\n        generate_nullifier_with_pedersen,\n    },\n};\n\nuse jwt::JWT;\nuse std::hash::poseidon2::Poseidon2;\n\nglobal MAX_PARTIAL_DATA_LENGTH: u32 = 640; // signed data length after partial SHA\nglobal MAX_DOMAIN_LENGTH: u32 = 64;\nglobal MAX_EMAIL_LENGTH: u32 = 128;\nglobal NONCE_LENGTH: u32 = 77;\n\n/**\n * @brief Verify JWT signature (RSA/SHA256 only) and validate hd and nonce fields\n *\n * @param partial_data: OIDC JWT (id_token) base64 data (`$header.$payload`) as byte array of ascii characters\n *                      We do partial SHA on the data up to hd field outside of the circuit, to reduce constraints\n *                      This field only contains the bytes after partial SHA; padded to MAX_PARTIAL_DATA_LENGTH\n * @param partial_hash: The 256-bit partial hash of the `data`\n * @param full_data_length: The full length of the `data` (before partial SHA)\n * @param b64_offset: Offset needed in `partial_data` to make the payloadB64 a multiple of 4\n *                    Signed data is $header.$payload. $payload might not be a multiple of 4 in `partial_data`, so we need to offset\n *                    Not attack-able by giving an incorrect offset, as string match of hd and nonce will fail\n * @param jwt_pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n * @param jwt_pubkey_redc_params_limbs: RSA reduction parameters limbs\n * @param jwt_signature_limbs: RSA signature limbs\n * @param domain: Domain name (`hd` key) as a byte array of ascii characters padded to MAX_DOMAIN_LENGTH\n * @param ephemeral_pubkey: Public key of the ephemeral keypair that is used to sign messages\n * @param ephemeral_pubkey_salt: Salt of the ephemeral keypair that is used to sign messages\n * @param ephemeral_pubkey_expiry: Expiry of the ephemeral keypair that is used to sign messages\n * @param nonce: JWT `nonce` as a byte array of ascii characters - 32 bytes\n **/\nfn main(\n    partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH>,\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    jwt_pubkey_modulus_limbs: [u128; 18],\n    jwt_pubkey_redc_params_limbs: [u128; 18],\n    jwt_signature_limbs: [u128; 18],\n    domain: pub BoundedVec<u8, MAX_DOMAIN_LENGTH>,\n    //ephemeral_pubkey: pub Field,\n    //ephemeral_pubkey_salt: Field,\n    //ephemeral_pubkey_expiry: pub u32,\n) -> pub Field {\n    // Init JWT struct and verify signature\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        jwt_pubkey_modulus_limbs,\n        jwt_pubkey_redc_params_limbs,\n        jwt_signature_limbs,\n    );\n    jwt.verify();\n\n    // // Get nonce claim\n    // let nonce: BoundedVec<u8, NONCE_LENGTH> = jwt.get_claim_string(\"nonce\".as_bytes());\n    // let nonce_field: Field = decimal_string_to_field(nonce.storage());\n\n    // // Verify nonce is the hash(ephemeral_pubkey, ephemeral_pubkey_salt, ephemeral_pubkey_expiry)\n    // let ephemeral_pubkey_hash = Poseidon2::hash(\n    //     [ephemeral_pubkey, ephemeral_pubkey_salt, ephemeral_pubkey_expiry as Field],\n    //     3,\n    // );\n\n    // assert(nonce_field == ephemeral_pubkey_hash, \"invalid nonce\");\n\n    // Assert email_verified claim\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n\n    // Get email claim\n    let email: BoundedVec<u8, MAX_EMAIL_LENGTH> = jwt.get_claim_string(\"email\".as_bytes());\n\n    // Get domain start_index from email claim - unconstrained, but we verify the domain bytes below\n    let domain_start_index = unsafe { get_domain_start_index_in_email(email) };\n\n    // Verify domain passed is present in the email claim after the @\n    assert(email.storage()[domain_start_index - 1] == 64, \"char before domain is not '@'\");\n    for i in 0..MAX_DOMAIN_LENGTH {\n        assert(email.storage()[domain_start_index + i] == domain.storage()[i], \"invalid domain\");\n    }\n\n    // @dev - Calculate a nullifier\n    let nullifier = generate_nullifier_with_poseidon2([full_data_length as Field, base64_decode_offset as Field]);\n    //let nullifier = generate_nullifier_with_pedersen([full_data_length as Field, base64_decode_offset as Field]);\n    //let nullifier = generate_nullifier([ephemeral_pubkey_hash, full_data_length as Field, base64_decode_offset as Field]);\n    //let nullifier: Field = 1; // [NOTE]: This is a test value\n\n    // @dev - Return the nullifier\n    nullifier\n}\n",
            "path": "/Users/unomasanori/Projects/actual-projects/OpenBands/Openbands-Miniapp/Openbands-Miniapp_ZK-circuit_and_contracts/circuits/src/main.nr"
        },
        "55": {
            "source": "use std::hash::poseidon2::Poseidon2;\nuse std::hash::pedersen_hash;\n\n/** \n * @notice - Calculate a nullifier using Poseidon2 hash\n */\npub fn generate_nullifier_with_poseidon2(inputs: [Field; _]) -> Field {\n    let nullifier_hash = Poseidon2::hash(\n        inputs,\n        inputs.len() as u32\n    );\n    nullifier_hash\n}\n\n/** \n * @notice - Calculate a nullifier using Pedersen hash\n */\npub fn generate_nullifier_with_pedersen(inputs: [Field; _]) -> Field {\n    let nullifier_hash = pedersen_hash(\n        inputs\n    );\n    nullifier_hash\n}",
            "path": "/Users/unomasanori/Projects/actual-projects/OpenBands/Openbands-Miniapp/Openbands-Miniapp_ZK-circuit_and_contracts/circuits/src/zk_jwt/nullifier_generator.nr"
        },
        "56": {
            "source": "use crate::{MAX_EMAIL_LENGTH};\n\nfn decimal_string_to_field<let LEN: u32>(decimal_bytes: [u8; LEN]) -> Field {\n    assert(LEN <= 77);\n\n    let mut field: Field = 0;\n    let mut multiplier: Field = 1;\n\n    for i in 0..LEN {\n        let ascii_char = decimal_bytes[LEN - i - 1];\n        if ascii_char >= 48 & ascii_char <= 57 {\n            let digit = ascii_char as Field - 48;\n            field += digit * multiplier;\n            multiplier *= 10;\n        }\n    }\n\n    field\n}\n\nunconstrained fn get_domain_start_index_in_email(email: BoundedVec<u8, MAX_EMAIL_LENGTH>) -> u32 {\n    let mut domain_start_index = 0;\n    for i in 0..MAX_EMAIL_LENGTH {\n        if email.storage()[i] == (\"@\".as_bytes())[0] {\n            domain_start_index = i + 1;\n            break;\n        }\n    }\n\n    domain_start_index\n}",
            "path": "/Users/unomasanori/Projects/actual-projects/OpenBands/Openbands-Miniapp/Openbands-Miniapp_ZK-circuit_and_contracts/circuits/src/zk_jwt/utils.nr"
        },
        "57": {
            "source": "mod partial_hash;\n\nuse base64::BASE64_URL_DECODER;\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse nodash::str_to_u64;\nuse partial_hash::partial_sha256_var_end;\nuse rsa::rsa::verify_sha256_pkcs1v15;\nuse sha256::sha256_var;\nuse string_search::{StringBody, SubString};\n\n/**\n * @brief Struct representing a JWT. Use the init functions to create an instance\n *        Currently only supports RSA 2048/SHA256 signatures\n **/\npub struct JWT<let MAX_DATA_LENGTH: u32> {\n    data: BoundedVec<u8, MAX_DATA_LENGTH>,\n    pubkey_modulus_limbs: [u128; 18],\n    redc_params_limbs: [u128; 18],\n    signature_limbs: [u128; 18],\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    is_partial_hash: bool, // compile time variable used internally\n}\n\nimpl<let MAX_DATA_LENGTH: u32> JWT<MAX_DATA_LENGTH> {\n    /**\n    * @brief Initialize JWT struct\n    *\n    * @param data: Signed JWT data (base64 encoded `$header.$payload`) as byte array of ascii characters\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Any 4x multiple from the payload start index.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs (2048-bit split into 18 limbs)\n    * @param signature_limbs: RSA signature limbs (2048-bit split into 18 limbs)\n    **/\n    pub fn init(\n        data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(data.len() <= MAX_DATA_LENGTH, \"data length is too long\");\n\n        JWT {\n            data,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            // below fields are not relevant unless for partial hash\n            full_data_length: MAX_DATA_LENGTH,\n            partial_hash: [0; 8],\n            is_partial_hash: false,\n        }\n    }\n\n    /**\n    * @brief Initialize JWT with partial SHA256 hash'ed input\n    *        Since SHA hash is expensive to compute in circuit, we can optimize by pre-hashing up to a certain block outside the circuit,\n    *        and verify for correctness in the circuit. This is possible since SHA works in incremental blocks.\n    *        You can pre-hash up to the SHA-256 block from where you want to extract a claim.\n    *\n    * @param partial_data: Signed JWT data (base64 encoded `$header.$payload`) after partial hashed block\n    * @param partial_hash: The 256-bit partial hash of the `partial_data` up to a certain block\n    * @param full_data_length: The full length of the `data` (before partial SHA)\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Trimming `offset` nubmer of bytes from the data should it base64 decode-able.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs\n    * @param signature_limbs: RSA signature limbs\n    **/\n    pub fn init_with_partial_hash(\n        partial_data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        partial_hash: [u32; 8],\n        full_data_length: u32,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(partial_data.len() <= MAX_DATA_LENGTH, \"partial_data length is too long\");\n\n        JWT {\n            data: partial_data,\n            full_data_length,\n            partial_hash,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: true,\n        }\n    }\n\n    /**\n    * @brief Verify JWT signature with RSA 2048/SHA256\n    **/\n    pub fn verify(mut self) {\n        let mut data_hash: [u8; 32] = [0; 32];\n\n        if (!self.is_partial_hash) {\n            // this is a compile time conditional\n            // Hash the data using SHA256\n            data_hash = sha256_var(self.data.storage(), self.data.len() as u64);\n        } else {\n            // Compute the full SHA256 hash with the given partial hash\n            data_hash = partial_sha256_var_end(\n                self.partial_hash,\n                self.data.storage(),\n                self.data.len() as u64,\n                self.full_data_length as u64,\n            );\n        }\n\n        // Verify RSA signature\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(false, self.pubkey_modulus_limbs, self.redc_params_limbs);\n\n        let signature = RuntimeBigNum { params, limbs: self.signature_limbs };\n\n        assert(verify_sha256_pkcs1v15(data_hash, signature, 65537));\n    }\n\n    /**\n    * @brief Get a string claim from the JWT payload\n    *\n    * @param KEY_LENGTH: The length of the claim key\n    * @param MAX_VALUE_LENGTH: The maximum length of the claim value\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        self.get_claim::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key, true)\n    }\n\n    /**\n    * @brief Assert a string claim in the JWT payload.\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: BoundedVec<u8, MAX_VALUE_LENGTH>,\n    ) {\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> =\n            self.get_claim_string::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a number (u64) claim from the JWT payload\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_number<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> u64 {\n        let claim = self.get_claim::<KEY_LENGTH, 20>(claim_key, false);\n        str_to_u64(claim.storage())\n    }\n\n    /**\n    * @brief Assert a number (u64) claim in the JWT payload.\n    *        Refer to `get_claim_number` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_number<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: u64,\n    ) {\n        let value = self.get_claim_number::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a boolean claim from the JWT payload\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_bool<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> bool {\n        let value = self.get_claim::<KEY_LENGTH, 5>(claim_key, false);\n        let mut is_true = true;\n        for i in 0..4 {\n            is_true = is_true & (value.storage()[i] == \"true\".as_bytes()[i]);\n        }\n        let is_false = value.storage() == \"false\".as_bytes();\n\n        assert(is_true | is_false, \"incorrect value for claim\");\n        is_true\n    }\n\n    /**\n    * @brief Assert a boolean claim in the JWT payload.\n    *        Refer to `get_claim_bool` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_bool<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: bool,\n    ) {\n        let value = self.get_claim_bool::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Internal function to get claim bytes from the JWT payload\n    **/\n    fn get_claim<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        //Safety: extract the value in unconstrained mode, and verify later\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> = unsafe {\n            self.extract_claim_unconstrained::<KEY_LENGTH, MAX_VALUE_LENGTH>(\n                claim_key,\n                is_value_quoted,\n            )\n        };\n\n        // constrain the extracted value is present in the payload using string_search lib\n        // haystack is the base64 decoded payload;\n        let haystack = self.prepare_haystack();\n\n        // needle is the key with quotes around it - searching for just the key string might return false positives from elsewhere\n        // Note: key length is known at compile time as this lib doesn't support runtime keys\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = claim_key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // assert value after quoted key is a colon\n        let colon_index = position + KEY_LENGTH + 2; // +2 for the quotes around the key\n        assert(haystack.body[colon_index] == 58); // :\n\n        // assert the value is correct - string have quotes around them, numbers and booleans don't\n        let mut value_start_index = colon_index + 1; // Value starts after the colon\n        let mut index_after_value = value_start_index + value.len(); // Index after the value, quoted or otherwise\n\n        if (is_value_quoted) {\n            // adjust start index for the quotes around the value\n            value_start_index = value_start_index + 1; // Adjust for the quote before the value\n            index_after_value = index_after_value + 2; // Adjust for the quotes around the value\n\n            // assert the char before and after the value is a quote\n            assert(haystack.body[value_start_index - 1] == 34); // \"\n            assert(haystack.body[index_after_value - 1] == 34); // \"\n        }\n\n        // assert the value is correct\n        for i in 0..MAX_VALUE_LENGTH {\n            if (i < value.len()) {\n                assert(haystack.body[value_start_index + i] == value.storage()[i]);\n            }\n        }\n\n        // assert the char after the value is a comma or a closing brace (last claim in the payload)\n        let char_after_value = haystack.body[index_after_value];\n        assert((char_after_value == 44) | (char_after_value == 125)); // , or }\n\n        value\n    }\n\n    /**\n    * @brief Internal function to prepare the haystack for string search (base64 decoded payload with offset applied)\n    **/\n    fn prepare_haystack(\n        self,\n    ) -> StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> {\n        // We need to decode the payload from the payload_b64_offset; i.e. data.slice(0, base64_decode_offset)\n        let mut data_to_b64_decode: [u8; MAX_DATA_LENGTH] = [0; MAX_DATA_LENGTH];\n\n        // Conditional inside the for loop blows up the constraint size\n        // So we fill the full MAX_DATA_LENGTH (rotate on overflow) and prepare a BoundedVec with the correct length later\n        for i in 0..MAX_DATA_LENGTH {\n            data_to_b64_decode[i] =\n                self.data.storage()[(i + self.base64_decode_offset) % self.data.len()];\n        }\n\n        let data_to_decode_bv: BoundedVec<u8, MAX_DATA_LENGTH> = BoundedVec::from_parts(\n            data_to_b64_decode,\n            self.data.len() - self.base64_decode_offset,\n        );\n\n        // Decode the payload\n        let payload: BoundedVec<u8, ((MAX_DATA_LENGTH / 4) * 3)> =\n            BASE64_URL_DECODER::decode_var(data_to_decode_bv); // b64 decoded length is ceil(MAX_DATA_LENGTH / 3) * 4\n\n        // Create the haystack\n        let haystack: StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> =\n            StringBody::new(payload.storage(), payload.len());\n\n        haystack\n    }\n\n    /**\n    * @brief Unconstrained function to extract claim bytes from the JWT payload\n    **/\n    pub unconstrained fn extract_claim_unconstrained<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        let haystack = self.prepare_haystack();\n\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // Get the value after the key\n        let mut value_start_idx = position + key.len() + 3; // +3 for the quote around the key and the colon\n        if (is_value_quoted) {\n            value_start_idx += 1; // +1 for the quote before the value\n        }\n\n        let mut value: BoundedVec<u8, MAX_VALUE_LENGTH> = BoundedVec::new();\n\n        for i in 0..MAX_VALUE_LENGTH {\n            let val = haystack.body[value_start_idx + i];\n            if ((val == 34) | (val == 44) | (val == 125)) {\n                break;\n            }\n            value.push(haystack.body[value_start_idx + i]);\n        }\n\n        value\n    }\n}\n\n#[test]\nfn test_verify() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_verify_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_get_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_get_claim_string_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_assert_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let value: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    jwt.assert_claim_string(\"email\".as_bytes(), value);\n}\n\n#[test]\nfn test_get_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let iat: u64 = jwt.get_claim_number(\"iat\".as_bytes());\n    let expected_iat: u64 = 1737642217;\n    assert(iat == expected_iat);\n}\n\n#[test]\nfn test_assert_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let expected_iat: u64 = 1737642217;\n    jwt.assert_claim_number(\"iat\".as_bytes(), expected_iat);\n}\n\n#[test]\nfn test_get_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email_verified: bool = jwt.get_claim_bool(\"email_verified\".as_bytes());\n    assert(email_verified);\n}\n\n#[test]\nfn test_assert_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n}\n\n#[test]\nfn test_get_last_claim() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let exp: u64 = jwt.get_claim_number(\"exp\".as_bytes()); // exp is the last claim in the test payload\n    let expected_exp: u64 = 1799999999;\n    assert(exp == expected_exp);\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/zkemail/noir-jwt/v0.5.0/src/lib.nr"
        },
        "58": {
            "source": "// Copied form https://raw.githubusercontent.com/zkemail/zkemail.nr/refs/heads/main/lib/src/partial_hash.nr\n// Use dependency one zkemail.nr is updated to bignum 0.6.0\n\nuse std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L23\n// Convert 64-byte array to array of 16 u32s\npub fn msg_u8_to_u32(msg: [u8; BLOCK_SIZE]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L38\nunconstrained fn build_msg_block_iter<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L59\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32,\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE: u32 = 64;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L86-L116\n/**\n * Partially computes a SHA256 hash of a message but does not finalize\n * @notice can be used for post-partial hashing where client proves part of hash and relies on server to finish\n * \n *\n * @param N: the length of the message to hash.\n *  --- WARNING: N must be divisible by BLOCK_SIZE such that N % BLOCK_SIZE == 0 \n *      otherwise the remaining bytes will not be inputted when computing the initial hash\n * @param msg: the preimage to begin hashing\n * @return the intermediate hash state\n */\npub fn partial_sha256_var_start<let N: u32>(msg: [u8; N]) -> [u32; 8] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) & (msg_start < message_size) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L85\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the remaining preimage\n * @param real_message_size -= the total size of the preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u64,\n    real_message_size: u64,\n) -> [u8; 32] {\n    let message_size = message_size as u32; // noir stdlib uses u64\n    let real_message_size = real_message_size as u32; // noir stdlib uses u64\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, real_message_size) };\n\n    if !is_unconstrained() {\n        for i in 0..56 {\n            if i < msg_byte_ptr {\n                assert_eq(msg_block[i], last_block[i]);\n            } else {\n                assert_eq(msg_block[i], zero);\n            }\n        }\n\n        let len = 8 * real_message_size;\n        let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n        for i in 56..64 {\n            assert_eq(msg_block[i], len_bytes[i - 56]);\n        }\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n    message_size: u32,\n) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/zkemail/noir-jwt/v0.5.0/src/partial_hash.nr"
        },
        "60": {
            "source": "unconstrained fn __boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let mut r: [Field; Range] = [0; Range];\n    for i in limit..Range {\n        r[i] = 1;\n    }\n    r\n}\n\n/**\n * @brief Return a size-Range array of values that describe whether an index `i` is in the range `0<=i<limit`\n * @details When evaluating variable-length loops of size `limit`, it is neccessary to iterate over a maximum bound defined at compile-time\n *          Any constraints or evaluations that occur where `i >= limit` must be discarded.\n *          This is most efficiently performed by using predicate `Field` values, where `predicate[i] = 0` if `i < limit`, otherwise `predicate[i] = 1`.\n *          This method efficiently generates such predicate values more efficiently than querying whether `i <= limit` at every iteration.\n *          Gate cost is 3 * Range\n **/\npub fn boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let r = unsafe {\n        //@safety r contains claims about whether `r[i] >= limit`. the rest of this function checks this claim is correct\n        __boundary_check(limit)\n    };\n\n    let mut transition_index = 0;\n    // **\n    // We have an array of Field elements `r` such that:\n    // if i < limit, `r = 0`\n    // if i >= limit, `r = 1`\n    // We validate the predicate list `r` is correct by checking:\n    // 1. every r[i] element is 0 or 1\n    // 2. if r[i] = 1, r[i+1] must also be 1\n    // 3. if r[i] = 0 and r[i+1] = 1, then i == limit\n    // we check point 3 by tracking a `transition_index` variable, where\n    // transition_index += (1 - r[i]) * (r[i+1]) * i\n    // i.e. if r[i] == 0 and r[i+1] == 1, transition_index += i\n    //      else transition_index += 0\n    // NOTE: total constraint cost is 3 gates per iteration\n    // **\n    if Range > 0 {\n        for i in 0..Range - 1 {\n            assert_eq(r[i] * r[i], r[i]);\n            assert_eq(r[i] * r[i + 1], r[i]);\n            let idx = (r[i + 1] * (1 - r[i])) * (i as Field + 1);\n            transition_index = transition_index + idx;\n            std::as_witness(transition_index);\n        }\n        assert_eq(r[Range - 1] * r[Range - 1], r[Range - 1]);\n        transition_index = transition_index + (1 - r[Range - 1]) * limit as Field;\n        assert(transition_index == limit as Field);\n        r\n    } else {\n        [0; Range]\n    }\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/boundary_check.nr"
        },
        "61": {
            "source": "use super::defaults::{\n    BASE64_ELEMENTS_PER_CHUNK, BASE64_PADDING_CHAR, BYTES_PER_CHUNK, INVALID_DECODE_VALUE,\n};\n\npub use crate::boundary_check::boundary_check;\nuse crate::tables::{\n    BASE64_DECODE_BE_TABLE, BASE64_DECODE_BE_URL_TABLE, BASE64_DECODE_BE_URL_VAR_TABLE,\n    BASE64_DECODE_BE_VAR_TABLE,\n};\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4)\npub mod Base64DecodeBE {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 0>(input)\n    }\n}\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4), but WITHOUT padding\npub mod Base64DecodeBENoPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 0>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5\npub mod Base64DecodeBEUrlSafe {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 1>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5, but WITH padding added\npub mod Base64DecodeBEUrlSafeWithPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 1>(input)\n    }\n}\n\n/**\n * @brief Return a human-readable error if the input is invalid Base64\n * @details We constrain the decoding to be correct by using a lookup table to decode Base64.\n *          Validation is performed by batch-checking that no lookups returned an error state.\n *          This produces unhelpful error messages so we put this sanitised check in an unconstrained fn\n **/\nunconstrained fn __validate_decoded(decoded: Field, input_byte: u8, offset: u32) {\n    assert(\n        decoded != INVALID_DECODE_VALUE,\n        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n    );\n}\n\n/**\n * @brief Given a variable-sized number of Base64 encoded characters, return a *claim* about how many are padding chars\n * @note The returned value is only a claim and must be validated\n **/\nunconstrained fn __get_num_padding_chars_var<let InputElements: u32>(\n    input: BoundedVec<u8, InputElements>,\n) -> (bool, bool) {\n    let len = input.len();\n    let r1 = if len > 1 {\n        input.get(len - 2) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    let r2 = if len > 0 {\n        input.get(len - 1) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    (r1, r2)\n}\n\n/**\n * @brief Take an array of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\nfn decode<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: [u8; InputElements],\n) -> [u8; OutputBytes] {\n    let rem = OutputBytes % 3;\n    // Calculate the number of padding characters and the length of the input without padding\n    let num_padding_chars = if rem == 1 {\n        2\n    } else if rem == 2 {\n        1\n    } else {\n        0\n    };\n\n    // Assert that the output length & input length are correct\n    // Every 3 output chars will be encoded as 4 base64 input chars\n    let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n    if Pad != 0 {\n        assert(\n            encoded_length == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n        );\n        // enforce Base64 padding is valid\n        if num_padding_chars == 2 {\n            let offset = InputElements - 1;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n            let offset = InputElements - 2;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        } else if num_padding_chars == 1 {\n            let offset = InputElements - 1;\n            assert(\n                input[InputElements - 1] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        }\n    } else {\n        let expected = encoded_length - num_padding_chars;\n        assert(\n            encoded_length - num_padding_chars == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n        );\n    }\n\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n    let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    // validity_check = accumulator value that we add every output from BASE64_DECODE_BE_TABLE into.\n    // Invalid error states will return a lookup value of -2^32 , which will cause `validity_check` to fail a 32-bit range check.\n    // This batch-validation technique is more efficient than asserting every returned token is valid.\n    let mut validity_check: Field = 0;\n    if num_chunks > 0 {\n        let final_chunk = num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_TABLE[input_byte]\n                } else {\n                    BASE64_DECODE_BE_TABLE[input_byte]\n                };\n                validity_check += decoded;\n                slice += decoded as Field;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        // process the final chunk, which may contain padding\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        let base64_elements_in_final_chunk = if Pad != 0 {\n            InputElements - base64_offset - num_padding_chars\n        } else {\n            InputElements - base64_offset\n        };\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_TABLE[input_byte]\n            } else {\n                BASE64_DECODE_BE_TABLE[input_byte]\n            };\n            validity_check += decoded;\n            slice += decoded as Field;\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n        }\n\n        // If any lookups returned an error state, this 32-bit range check will fail.\n        validity_check.assert_max_bit_size::<32>();\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n\n/**\n * @brief Take a variable-length vector of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\npub fn decode_var<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: BoundedVec<u8, InputElements>,\n) -> BoundedVec<u8, OutputBytes> {\n    // We don't know how many padding bytes the input string contains - we use an unconstrained fn to return a *claim* that we will later validate\n    let (has_first_padding_byte_claim, has_second_padding_byte_claim) = if (Pad == 1) {\n        unsafe {\n            //@safety get claims about whether the bytes input[input.len() - 2] and input[input.len() - 1] are padding chars\n            // we validate this later on by requiring these characters equal BASE64_PADDING_CHAR by looking up BASE64_DECODE_BE_VAR_TABLE\n            crate::decoder::__get_num_padding_chars_var::<InputElements>(input)\n        }\n    } else {\n        (false, false)\n    };\n\n    // num_padding_chars is a claim that depends on has_first_padding_byte_claim and has_second_padding_byte_claim being correct\n    let num_padding_chars: u32 = if Pad == 1 {\n        has_first_padding_byte_claim as u32 + has_second_padding_byte_claim as u32\n    } else {\n        0\n    };\n\n    let input_length = input.len();\n    let input = input.storage();\n\n    // boundary_flags = array of Field elements.\n    // if `i < input_length, boundary_flags[i] = 0`\n    // if `i >= input_length, boundary_flags[i+1] = 1`\n    // used as cheap(ish) predicates when iterating over bounded vector elements\n    let boundary_flags: [Field; InputElements] = boundary_check(input_length);\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n\n    let max_num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    let mut validity_check: Field = 0;\n    // if statement should be known at compile time\n    if max_num_chunks > 0 {\n        let final_chunk: u32 = max_num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n\n                let mut decode_index: Field = 0;\n                if Pad == 1 {\n                    let mut might_be_second_padding_char = 0;\n                    let mut might_be_first_padding_char = 0;\n                    // These if statements should not cost extra gates as the condition is known at compile time\n                    if (offset + 2 < InputElements) {\n                        might_be_first_padding_char = (1 - boundary_flags[offset])\n                            * (1 - boundary_flags[offset + 1])\n                            * boundary_flags[offset + 2];\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else if (offset + 1 < InputElements) {\n                        // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                        might_be_first_padding_char =\n                            (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else // last character\n                    {\n                        might_be_first_padding_char = 0;\n                        might_be_second_padding_char = (1 - boundary_flags[offset]);\n                    }\n\n                    // Cases where we need to require a padding character is present:\n                    // Case 1: we are at byte position `input.len() - 2` and `has_first_padding_byte_claim = true`\n                    // Case 2: we are at byte position `input.len() - 1` and `has_second_padding_byte_claim = true`\n                    let require_padding = might_be_first_padding_char\n                        * has_first_padding_byte_claim as Field\n                        + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n\n                    // The `decode_index` is used to map the input Base64 character into an output decoded character.\n                    // We know `input_byte` is in the range 0-255 , so we use a size 768 lookup to handle the following 3 cases:\n                    // Case 1 (index range 0-255): No special cases. We decode the Base64 ASCII char into an ASCII char\n                    // Case 2 (index range 256-511): We have exceeded the length of the input. The only valid input is 0, which decodes to 0 (all other byte values return an error state)\n                    // Case 3 (index range 512-767): A claim has been made that a padding byte is present, and we are at the appropriate byte location to check this.\n                    //                               The only valid input is BASE64_PADDING_CHAR, which decodes to 0. All other inputs return an error state\n                    decode_index =\n                        input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n                } else {\n                    decode_index = input_byte as Field + boundary_flags[offset] * 256;\n                }\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n                } else {\n                    BASE64_DECODE_BE_VAR_TABLE[decode_index]\n                };\n\n                validity_check += decoded;\n                slice += decoded;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            // convert the decoded slice into bytes and populate result array\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n        // process the final chunk\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        // might include padding characters\n        let base64_elements_in_final_chunk = InputElements - base64_offset;\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n\n            let mut decode_index: Field = 0;\n            if Pad == 1 {\n                let mut might_be_second_padding_char = 0;\n                let mut might_be_first_padding_char = 0;\n                // These if statements should not cost extra gates as the condition is known at compile time\n                if (offset + 2 < InputElements) {\n                    might_be_first_padding_char = (1 - boundary_flags[offset])\n                        * (1 - boundary_flags[offset + 1])\n                        * boundary_flags[offset + 2];\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else if (offset + 1 < InputElements) {\n                    // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                    might_be_first_padding_char =\n                        (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else // last character\n                {\n                    might_be_first_padding_char = 0;\n                    might_be_second_padding_char = (1 - boundary_flags[offset]);\n                }\n\n                let require_padding = might_be_first_padding_char\n                    * has_first_padding_byte_claim as Field\n                    + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n                decode_index =\n                    input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n            } else {\n                decode_index = input_byte as Field + boundary_flags[offset] * 256;\n            }\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n            } else {\n                BASE64_DECODE_BE_VAR_TABLE[decode_index]\n            };\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n            validity_check += decoded;\n            slice += decoded as Field;\n        }\n\n        validity_check.assert_max_bit_size::<32>();\n\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    if Pad == 1 {\n        assert(input_length % 4 == 0, \"base64 encoded strings must be a multiple of 4 bytes\");\n    }\n\n    assert_eq(\n        has_first_padding_byte_claim,\n        has_second_padding_byte_claim * has_first_padding_byte_claim,\n        \"if first byte contains padding so must the second\",\n    );\n    let output_length = ((input_length * 3) / 4) - num_padding_chars;\n    BoundedVec::from_parts_unchecked(result, output_length)\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = Base64DecodeBE::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = Base64DecodeBENoPad::decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = Base64DecodeBE::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafeWithPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: [u8; 44] = [\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ];\n\n    let input: [u8; 60] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ];\n    let result: [u8; 44] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 59] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ];\n    let result = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = Base64DecodeBE::decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_empty() {\n    let input: BoundedVec<u8, 0> = BoundedVec::new();\n    let expected: BoundedVec<u8, 0> = BoundedVec::new();\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_padding() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103, 61, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBE::decode_var(input);\n    println(f\"result {result}\");\n    println(f\"expected {expected}\");\n\n    assert(result == expected);\n\n    // fo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 8> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 6> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_standard_no_pad() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    // fo\n    println(f\"result {result}, expected {expected}\");\n\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56]);\n\n    assert(result == expected);\n\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 61, offset 3\")]\nfn test_decode_var_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([47, 43, 65, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([255, 224]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var() {\n    // base64: \"SGVsbG8sIFdvcmxkIQ==\"\n    let input: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81, 61, 61,\n    ]);\n    // base64: \"SGVsbG8sIFdvcmxkIQ\"\n    let input_no_pad: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81,\n    ]);\n    // \"Hello, World!\"\n    let expected: BoundedVec<u8, 16> =\n        BoundedVec::from_array([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);\n\n    // all configurations should decode the same way\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    println(f\"result {result}, expected {expected}\");\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_multi_chunks() {\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ]);\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input_no_pad: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ]);\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: BoundedVec<u8, 48> = BoundedVec::from_array([\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ]);\n\n    // all configurations should give the same encoding\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/decoder.nr"
        },
        "99": {
            "source": "use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i]\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1]\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/constrained_ops.nr"
        },
        "100": {
            "source": "use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/expressions.nr"
        },
        "102": {
            "source": "/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [u128; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result: [u128; N] = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: u128 = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as u128;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: u128 = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as u128;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [u128; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = (val[i] as Field).to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = (val[N - 1] as Field).to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/serialization.nr"
        },
        "103": {
            "source": "use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        borrow_flags[i] = borrow as bool;\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_helpers.nr"
        },
        "104": {
            "source": "use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_ops.nr"
        },
        "106": {
            "source": "pub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [u128; N],\n\n    // @brief double_modulus: used when performing negations and subtractions\n    // @note we borrow 1 from the last limb. This is for easing up the operations that might underflow\n    pub double_modulus: [u128; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [u128; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [u128; N],\n        redc_param: [u128; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [u128; N]) -> [u128; N] {\n    let TWO_POW_120: u128 = 0x1000000000000000000000000000000;\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (modulus[i] + modulus[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/params.nr"
        },
        "107": {
            "source": "use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::Neg;\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [u128; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {\n\n    pub fn zero(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [u128; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::zero(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [u128; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    pub fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    pub fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    pub fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    pub fn get_limbs(self) -> [u128; N] {\n        self.limbs\n    }\n\n    pub fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    pub fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    pub unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    pub unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    pub unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    pub fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    pub fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    pub fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    pub fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    pub fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    pub fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/runtime_bignum.nr"
        },
        "114": {
            "source": "use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/utils/split_bits.nr"
        },
        "135": {
            "source": "use dep::bignum::RuntimeBigNum;\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\nmod tests {\n\n    use crate::types::RBN2048;\n    use super::verify_sha256_pkcs1v15;\n    use bignum::params::BigNumParams;\n    use bignum::RuntimeBigNum;\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_1024() {\n        // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170, 193,\n            96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n        ];\n\n        let params: BigNumParams<9, 1024> = BigNumParams::new(\n            false,\n            [\n                0xab238ad9cb37979a43aefbf10be8fb,\n                0x31347febe45fe8c2dac1dd30900704,\n                0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n                0x5eac6390f7873fe97ff9bb14a173ea,\n                0xbc41f700c91fd733a2c63177bbdbd4,\n                0x41442bd58769a3595b659a2ec9c6be,\n                0x4ddc91395f330382aa2e2d3fbe147,\n                0x3d008ff255a0bc71c7887f5728ba1,\n                0xb640c3a8f511c64e,\n            ],\n            [\n                0x5d53d2634c6a0918266043968ce263,\n                0x5dd4be3dce0323a492ee9340aec4db,\n                0xf82d0e2e5c8319f01a460c72c01854,\n                0x236e6fc6e62e8a1d522acda5fb3892,\n                0xdaf755619d66e580901aa224d03174,\n                0x8366291616480e7e1f202dbcedda87,\n                0x40ba1202537d1e94561ccc05265586,\n                0x69b993d857ba89ea5de9822aeb4b93,\n                0x167968c0000761a273,\n            ],\n        );\n\n        let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xc3850e84ea02da3f028ff422f4d6a9,\n                0x9761f0bd9021f76d45c60df0670a19,\n                0xc1ede421a43607ab623ed4d5a17fc8,\n                0x86197b4315206f4d53200b42555831,\n                0xe95783b69db28c26a83706f39d04cd,\n                0x18b178dc1a9ec76fb22b57e4dfa703,\n                0xdd0e19cd5a09ab48e7af4d0e3470e3,\n                0x10004dfab1cf91304e80e6baa4dfc7,\n                0x241c3fd77b90adef,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048() {\n        // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131, 166,\n            79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n                0xbfb937fc4d3cf02cc0af780f3cab44,\n                0xd20637ef7adcf5d238ee87bccc9bca,\n                0xb9db4f2663108e2f8b673f7612ae8b,\n                0x85f894ef669b36bfd3d86b0a28873,\n                0xdcc70e1884e38b8229cce3b884121d,\n                0x35488d1138e0b03e1676f7f5d8a5b3,\n                0xe1a97820e7dcbb4eab35c9b71bb273,\n                0x97d19eb3c63249ddbfcff915863f54,\n                0x3a78c7af6da0f6af0d67b1ca4b6065,\n                0xd7a3c433c020f624821e5e678c7d69,\n                0x52d5b53240feae82ffea3d2a3d9b09,\n                0xb8aad5e19e2163f68997c6fdd71906,\n                0x5db432d06e8b0bf59511100c7894e2,\n                0xadc0bbc4c54da10d1cc88438ea3127,\n                0xece1cf6a1501109cd2734d5893c8d9,\n                0x7196b90acdf06c31b1288064fd0c27,\n                0xc8,\n            ],\n            [\n                0x1b1deccf4dbde852c34a5d6908a0f,\n                0xbc9e5bdab22f023fbcca58692bccf5,\n                0x1f65439685623e45396ff55751c3bf,\n                0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n                0x5ca2e8e3048243c16c708a8030ab0d,\n                0x30079bfeb1fa51e5501581173ca19c,\n                0xff8d5f6bea485fdcc2716327f69ab4,\n                0x36b599d81589416b5b5f037986b999,\n                0x75612e34a4ff29f0a19a7823512f58,\n                0x288b6897929b54c3b26a5faa07c00f,\n                0x4b5675fa13ab7444f1f047d3eb1bbe,\n                0x6ba0ac610ef9f267ab30fe25bb1c84,\n                0xa386b48ee03168d5cea3ecb9dc901f,\n                0xacf1a01f7dba44e050c976142fb1f6,\n                0x97a63b5cb7efc60d3502946aec63cf,\n                0x12cc1d5cab10a1e9e2398d29b9e3ef,\n                0x4635cf25c66e76bba8034df46204fb,\n                0x146f,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xad29e07d16a278de49a371b9760a27,\n                0x86311920cc0e17a3c20cdff4c56dbb,\n                0x863556c6c5247dd83668dd825716ae,\n                0xc247c960945f4485b46c33b87425ca,\n                0x7326463c5c4cd5b08e21b938d9ed9a,\n                0x4f89fe0c82da08a0259eddb34d0da1,\n                0x43a74e76d4e1bd2666f1591889af0d,\n                0x240f7b80f0ff29f4253ee3019f832d,\n                0xc6edd131fbaaf725fd423dac52b362,\n                0x85f9732679242163e8afff44f6104d,\n                0xd3c3bbcb1757013fd6fb80f31dd9a6,\n                0x9008633f15df440e6df6d21ee585a2,\n                0x324df3425ed256e283be5b6b761741,\n                0xc60c1302929bd0e07caa4aeff4e8fd,\n                0x600d804ff13ba8d0e1bc9508714212,\n                0x50f7e75e5751d7edd61167027926be,\n                0x0db41d39442023e1420a8a84fe81d9,\n                0xab,\n            ],\n        };\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n        // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132, 239,\n            227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0xe40ee47801326543c8e84b85d567c1,\n                0x5b54ea87f0ce29de1995697b0696fd,\n                0x457078f8fdce68b437cac0970b2452,\n                0x473ec776fee3731b6ab06e35875ddc,\n                0x62dedd594e5f12c80c3ccb5791a6cd,\n                0xecb934b9d8272c5e3a418145345499,\n                0xd1af643b3d785470ed0c6cd633f706,\n                0xb58a57b9e96eccbdfc7c17f0333d4,\n                0x2ebd34b5039fc596504927c282c60d,\n                0x3a44928a74f25fc1043bb37ce4dfa8,\n                0x91448459f9617fac33a2816162ac9e,\n                0x70cb910d9f3e1a78864640ec6c8240,\n                0x9aed33f6b31f1c9de67248a98c180,\n                0x7f1416e032c79488c94b311e87bd9c,\n                0x7191b4ebb1b3fffa949fa48ed01e5,\n                0x350a75cbaeca6bfdd71ca83cdbcae9,\n                0xfb1d274fa207457c6814d42c09f9cf,\n                0xd4,\n            ],\n            [\n                0x803bf4d38110a7d37fdd05f590dee9,\n                0xa68d317c933f37cab5ab4e7c00a3b9,\n                0x476a05a536bf5f2aa1b8850146cba7,\n                0xca297ea8b5528d91d4836ff27c30ab,\n                0x75cf2eaab76eefa12bbd570f1aea9f,\n                0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n                0xd497db1f6ebe83decacaa647fabea6,\n                0x686b27ca330e25e7a7cf197f6433ef,\n                0xfde04d2225c8308b07580af0058a0f,\n                0xa29fb69777c0e916976243b2b09855,\n                0xf983592285852e7e1c2cb3ae968323,\n                0x673608017f9f5acf67a01b73728d70,\n                0xeeff82521c0bc432a05f4b7444fac0,\n                0x85a89c4d229f60aaa3aa7ac7dac1e2,\n                0xcfecff93bc9fbfe0d6dff6091f2db8,\n                0xf20f047dcb224b4447bd098c07f8c2,\n                0x554bb53cadeb3eaab911a189f90227,\n                0x133b,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xa250eff812c63eaaeaa3f04641c05f,\n                0xecc09613cb8b289c1f37c8f92e6a05,\n                0x2c0a0510058360c07af65d46f594fd,\n                0x943d67513363d3de430c94a1dafe7c,\n                0x511ec8e9b10bc6c6ff0d6c232ccf92,\n                0x50ffd07b3c093b3f5fc027de847731,\n                0xc268e1489449943fdafdf89ff168c3,\n                0x0b8b7f9f49b492f78fda58d252f23a,\n                0x491c6c4ef836a6a8730b7bf81e865e,\n                0x8746c75fb079d014e419543f56d7f0,\n                0x65804c417d6168a8bc0025d255cebf,\n                0xf695e91b77890b8e3fd775fa56e627,\n                0x5e90001c0218550f4083ae28025a2f,\n                0x526bd4eff34f25f62a698f0470e0a6,\n                0x7f224306a7d9daf536b1559434c6c6,\n                0x88809f16fe1fcea3c87511d9319735,\n                0x7694685fee0bfab4a9196b92ec6f2e,\n                0xa7,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n    }\n\n    #[test]\n    fn smoke_test() {\n        // Output of `cargo run -- --msg \"hello world\"` in the `signature_gen` directory\n        // Create runtime params:\n        let modulus_limbs = [\n            0x65af46d235241cf0e8fbe8cff4abb7,\n            0xeead39ba3f377ddd5ccb2ef2085190,\n            0xe483f94c0a98e8b618d92fb926f596,\n            0x1fa8c1b2c62cca6db090cd74a29db2,\n            0xc38e22042fcb74585a7e535301f50f,\n            0xcbc4378e5212752743ae78a75a44a9,\n            0xf5acc41788d9a346a0f75630a8b2b6,\n            0xf7a741bb3ecf1aadd5a327f362abd8,\n            0x4d5f24e815db43a1b2cc2ba40f8715,\n            0xe501f1a01305cb198475a4bff0da2e,\n            0xd541b78cfbc2b314083c340840c82c,\n            0xa0ab069c26b2a0458f4c642bf72526,\n            0x2ccb676d8f22517116fee0d2340533,\n            0x7cf2a7cf772025c0a83747bbc18228,\n            0xf9475f17988a56f17b3bdf88dc72dc,\n            0x4ff228bee24415fae7a7c05771e830,\n            0x55acd96b485515c38906106cf0d189,\n            0xb9,\n        ];\n        let redc_limbs = [\n            0x172c8f156f020ad88d30fa3ba47f03,\n            0x1740a43a67cb9a7be1ac1422d77246,\n            0x2d967be1edf369834317e04856e591,\n            0x65d9fa0de5fdab598c04d9a515156a,\n            0xc6791a661ea7621db7e6c4ec48f466,\n            0xa4a1a7c06d3e8a0bcbc540c6af6788,\n            0xdcaffeb149f5bf646caa00d7355715,\n            0xb75471630a9d0fefb5cb61e66991a1,\n            0x97c041a0fc30fdff3d5ed16997da02,\n            0xbfbe7d217694b269e1ed37819c2f17,\n            0x1b44ffc3180531e2ab8bdf7848a3a9,\n            0x9f004af11132cb68bb55998ed7616a,\n            0x1b15dbbb96ce80f479724bbd768a0c,\n            0x59ba1419093ae6ed2592ffb3065867,\n            0xa35b69affa3bb3f4713f315e50b584,\n            0xa873210f83a6de0d8cbb816af3e37,\n            0xbe4fe7cf98da87ec87638030797e92,\n            0x1619,\n        ];\n\n        let signature_limbs = [\n            0x2f397c4611d4a4271453e1e50e1578,\n            0xe506a7f47c721a4943783e8ad459e6,\n            0x6cc4ae1d91cb381cba9673470999fb,\n            0x1e127364d07f94e58227f50fbf5687,\n            0xf64a2579c7189f882d68832d16faa4,\n            0x3b014b74c6c6f76f2f8af170fa0fe4,\n            0x7df41e68c86815a6fdc33968c66b67,\n            0x6a57ac06282527242fddb6ed08dbdc,\n            0xac40d37b819c4b6193f90a634e4fc7,\n            0x96606ed166a7f032d858cd40ac73a5,\n            0x8eb7d4351159a46733f92610d5c597,\n            0xc8e8e9faa9738e82dbe774a3f5cf07,\n            0x89ca84fd54ee3d5cca87c9f178375e,\n            0xdb7a1465fc76507ea498a351af70dd,\n            0x6ac6fe14f51c711f983125c776f712,\n            0x3254c17fef51bf4194a8a1674634e3,\n            0xee38c83c77c6e1ff7b70a5d9d1dd0f,\n            0x26,\n        ];\n\n        let hash: [u8; 32] = [\n            0xb9, 0x4d, 0x27, 0xb9, 0x93, 0x4d, 0x3e, 0x08, 0xa5, 0x2e, 0x52, 0xd7, 0xda, 0x7d,\n            0xab, 0xfa, 0xc4, 0x84, 0xef, 0xe3, 0x7a, 0x53, 0x80, 0xee, 0x90, 0x88, 0xf7, 0xac,\n            0xe2, 0xef, 0xcd, 0xe9,\n        ];\n\n        let has_multiplicative_inverse = false;\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n        let signature: RBN2048 = RBN2048::from_array(params, signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(hash, signature, 65537));\n    }\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir_rsa/v0.7.0/src/rsa.nr"
        },
        "137": {
            "source": "mod utils;\n\npub use utils::{conditional_select, DebugRandomEngine, lt_f};\nuse std::collections::bounded_vec::BoundedVec;\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\npub struct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    pub byte_length: u32,\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\npub struct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    pub byte_length: u32,\n}\n\npub type StringBody32 = StringBody<62, 2, 32>;\npub type StringBody64 = StringBody<93, 3, 64>;\npub type StringBody128 = StringBody<155, 5, 128>;\npub type StringBody256 = StringBody<279, 9, 256>;\npub type StringBody512 = StringBody<527, 17, 512>;\npub type StringBody1024 = StringBody<1054, 34, 1024>;\npub type StringBody2048 = StringBody<2077, 67, 2048>;\npub type StringBody4096 = StringBody<4123, 133, 4096>;\npub type StringBody8192 = StringBody<8215, 265, 8192>;\npub type StringBody16384 = StringBody<16399, 529, 16384>;\n\npub type SubString32 = SubString<62, 1, 32>;\npub type SubString64 = SubString<93, 2, 64>;\npub type SubString128 = SubString<155, 4, 128>;\npub type SubString256 = SubString<279, 8, 256>;\npub type SubString512 = SubString<527, 16, 512>;\npub type SubString1024 = SubString<1054, 33, 1024>;\n\npub trait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field,\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    pub fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes,\n            \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes,\n            \"SubString::concat, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    pub fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes,\n            \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes,\n            \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx as u32]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field,\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    pub fn substring_match<NeedleSubString>(self, substring: NeedleSubString) -> (bool, u32)\n    where\n        NeedleSubString: SubStringTrait,\n    {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text\n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len(),\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length,\n            \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\",\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks =\n            lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk =\n                num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes =\n                num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n        when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n        a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n        Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n        The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n        If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk =\n            self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field =\n                starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n            NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let substring_idx = (predicate as Field) * lhs_index;\n            let byte_from_substring = substring.get(substring_idx) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/\n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field\n            * (final_needle_chunk - initial_needle_chunk)\n            + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field,\n        );\n        (true, position)\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for StringBody<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n///\n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(\n    body: [u8; MaxPaddedBytes],\n) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text =\n        \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n\n#[test]\nfn test_substring_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_string_body_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn regression_20() {\n    let haystack: [u8; 128] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x92, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x6e, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n\n    let needle: [u8; 32] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let needle_len: u32 = 0x20;\n    let id_haystack: StringBody128 = StringBody::new(haystack, 128);\n    let pk_needle: SubString32 = SubString::new(needle, needle_len);\n    let (result, _): (bool, u32) = id_haystack.substring_match(pk_needle);\n    assert(result);\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/lib.nr"
        },
        "138": {
            "source": "pub unconstrained fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32,\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt`\n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size::<32>();\n\n        predicate\n    }\n}\n\npub struct DebugRandomEngine {\n    pub seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = std::hash::blake3(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    pub unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n",
            "path": "/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/utils.nr"
        }
    },
    "names": [
        "main"
    ],
    "brillig_names": [
        "build_msg_block_iter",
        "pad_msg_block",
        "attach_len_to_msg_block",
        "__mul",
        "__compute_quadratic_expression_with_borrow_flags",
        "extract_claim_unconstrained",
        "__boundary_check",
        "__validate_decoded",
        "search",
        "get_lt_predicate_f",
        "extract_claim_unconstrained",
        "get_domain_start_index_in_email",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
    ]
}